//
//  ErrorHandling.swift
//  DoneDay - –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
//
//  Created by Yaroslav Tkachenko on 02.10.2025.
//

import Foundation
import SwiftUI
import Combine

// MARK: - –¢–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫

enum AppError: LocalizedError {
    // Task Errors
    case taskCreationFailed(reason: String)
    case taskUpdateFailed(reason: String)
    case taskDeletionFailed(reason: String)
    case taskNotFound
    
    // Project Errors
    case projectCreationFailed(reason: String)
    case projectUpdateFailed(reason: String)
    case projectDeletionFailed(reason: String)
    case projectNotFound
    case projectNameEmpty
    
    // Area Errors
    case areaCreationFailed(reason: String)
    case areaUpdateFailed(reason: String)
    case areaDeletionFailed(reason: String)
    
    // Data Errors
    case coreDataSaveFailed(Error)
    case coreDataFetchFailed(Error)
    case invalidData
    
    // Import/Export Errors
    case exportFailed(reason: String)
    case importFailed(reason: String)
    case fileNotFound
    case invalidFileFormat
    case encodingFailed
    case decodingFailed
    
    var errorDescription: String? {
        switch self {
        // Task Errors
        case .taskCreationFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: \(reason)"
        case .taskUpdateFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: \(reason)"
        case .taskDeletionFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: \(reason)"
        case .taskNotFound:
            return "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
        // Project Errors
        case .projectCreationFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç: \(reason)"
        case .projectUpdateFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç: \(reason)"
        case .projectDeletionFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç: \(reason)"
        case .projectNotFound:
            return "–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        case .projectNameEmpty:
            return "–ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é"
            
        // Area Errors
        case .areaCreationFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±–ª–∞—Å—Ç—å: \(reason)"
        case .areaUpdateFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –æ–±–ª–∞—Å—Ç—å: \(reason)"
        case .areaDeletionFailed(let reason):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–±–ª–∞—Å—Ç—å: \(reason)"
            
        // Data Errors
        case .coreDataSaveFailed(let error):
            return "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: \(error.localizedDescription)"
        case .coreDataFetchFailed(let error):
            return "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: \(error.localizedDescription)"
        case .invalidData:
            return "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ"
            
        // Import/Export Errors
        case .exportFailed(let reason):
            return "–ï–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è: \(reason)"
        case .importFailed(let reason):
            return "–Ü–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è: \(reason)"
        case .fileNotFound:
            return "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        case .invalidFileFormat:
            return "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É"
        case .encodingFailed:
            return "–ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
        case .decodingFailed:
            return "–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
        }
    }
    
    var recoverySuggestion: String? {
        switch self {
        case .projectNameEmpty:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É"
        case .coreDataSaveFailed, .coreDataFetchFailed:
            return "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫"
        case .invalidFileFormat:
            return "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON"
        case .fileNotFound:
            return "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —à–ª—è—Ö–æ–º"
        default:
            return "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"
        }
    }
}

// MARK: - Error Alert Manager

class ErrorAlertManager: ObservableObject {
    @Published var currentError: AppError?
    @Published var showingError = false
    
    static let shared = ErrorAlertManager()
    
    private init() {}
    
    func handle(_ error: AppError) {
        DispatchQueue.main.async { [weak self] in
            self?.currentError = error
            self?.showingError = true
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
            print("‚ùå Error: \(error.errorDescription ?? "Unknown error")")
            if let suggestion = error.recoverySuggestion {
                print("üí° Suggestion: \(suggestion)")
            }
        }
    }
    
    func handle(_ error: Error) {
        if let appError = error as? AppError {
            handle(appError)
        } else {
            handle(.invalidData)
        }
    }
    
    func clearError() {
        currentError = nil
        showingError = false
    }
}

// MARK: - Error Alert View Modifier

struct ErrorAlertModifier: ViewModifier {
    @ObservedObject var errorManager = ErrorAlertManager.shared
    
    func body(content: Content) -> some View {
        content
            .alert("–ü–æ–º–∏–ª–∫–∞", isPresented: $errorManager.showingError, presenting: errorManager.currentError) { error in
                Button("OK") {
                    errorManager.clearError()
                }
            } message: { error in
                VStack(alignment: .leading, spacing: 8) {
                    if let description = error.errorDescription {
                        Text(description)
                    }
                    if let suggestion = error.recoverySuggestion {
                        Text(suggestion)
                            .font(.caption)
                    }
                }
            }
    }
}

extension View {
    func withErrorHandling() -> some View {
        modifier(ErrorAlertModifier())
    }
}

// MARK: - Result Extension –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ

extension Result {
    func handleError(using manager: ErrorAlertManager = .shared) -> Success? {
        switch self {
        case .success(let value):
            return value
        case .failure(let error):
            if let appError = error as? AppError {
                manager.handle(appError)
            } else {
                manager.handle(AppError.invalidData)
            }
            return nil
        }
    }
}

// MARK: - Validation Helpers

struct Validator {
    static func validateProjectName(_ name: String) throws {
        guard !name.trimmingCharacters(in: .whitespaces).isEmpty else {
            throw AppError.projectNameEmpty
        }
    }
    
    static func validateTask(_ title: String) throws {
        guard !title.trimmingCharacters(in: .whitespaces).isEmpty else {
            throw AppError.taskCreationFailed(reason: "–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
        }
    }
}
